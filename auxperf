#include <OneWire.h>
#include <DallasTemperature.h>

#define ONE_WIRE_BUS 8

OneWire oneWire(ONE_WIRE_BUS);

DallasTemperature sensors(&oneWire);

float Celsius = 0;
float Fahrenheit = 0;

int calibrationTime = 30;

long unsigned int lowIn;
long unsigned int pause = 5000;
boolean lockLow = true;
boolean takeLowTime;
int pirPin = 2;
int RELAY = 12;

/////////////////////////////
//SETUP
void setup() {
  sensors.begin();
  Serial.begin(9600);
  pinMode(pirPin, INPUT);
  pinMode(RELAY, OUTPUT);
  digitalWrite(pirPin, LOW);

  //give the sensor some time to calibrate
  Serial.print("calibrating sensor ");
  for (int i = 0; i < calibrationTime; i++) {
    Serial.print(".");
    delay(1000);
  }
  Serial.println(" done");
  Serial.println("SENSOR ACTIVE");
  delay(50);
}

////////////////////////////
//LOOP
void loop() {
  sensors.requestTemperatures();
  Celsius = sensors.getTempCByIndex(0);
  Fahrenheit = sensors.toFahrenheit(Celsius);
  Serial.print(Celsius);
  Serial.print(" C  ");
  Serial.print(Fahrenheit);
  Serial.println(" F");

  if (digitalRead(pirPin) == HIGH) {
    unsigned long startTime = millis(); // Get the current time
    while (millis() - startTime < 6000) { // Run for 6 seconds
      digitalWrite(RELAY, HIGH); // Turn on the LED (relay)
      delay(125); // Wait for 1/8th of a second (4 flashes per second)
      digitalWrite(RELAY, LOW); // Turn off the LED
      delay(125); // Wait for 1/8th of a second
    }
    // Set the pin to HIGH for 6 seconds
    digitalWrite(RELAY, HIGH);
    digitalWrite(3, HIGH);
    delay(6000);
    digitalWrite(3, LOW); // Turn off the pin
  }

  if (digitalRead(pirPin) == LOW) {
    digitalWrite(RELAY, LOW);  // Turn off the LED (relay)
    if (takeLowTime) {
      lowIn = millis();          // Save the time of the transition from high to LOW
      takeLowTime = false;       // Make sure this is only done at the start of a LOW phase
    }
    // If the sensor is low for more than the given pause, 
    // we assume that no more motion is going to happen
    if (!lockLow && millis() - lowIn > pause) {
      // Makes sure this block of code is only executed again after 
      // a new motion sequence has been detected
      lockLow = true;
      Serial.print("motion ended at ");      // Output
      Serial.print((millis() - pause) / 1000);
      Serial.println(" sec");
      delay(50);
    }
  }
}
